#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.


LC_ALL=C
export LC_ALL

# . ./auto/options  <==>  source ./auto/options
. auto/options															# 定义目录和指定编译选项(包括内置模块是否加载，--help查看)
. auto/init																# 初始化makefile的信息，创建makefile(包括 clean)
. auto/sources															# 定义核心模块和组件模块源文件、依赖的变量，变量里存文件名

test -d $NGX_OBJS || mkdir -p $NGX_OBJS									# 如果没有则生成 ./objs 文件夹

echo > $NGX_AUTO_HEADERS_H												# 清空 ./objs/ngx_auto_headers.h
echo > $NGX_AUTOCONF_ERR												# 清空 ./objs/autoconf.err

echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H
# 将configure脚本调用时的所有参数定义到 ./objs/ngx_auto_headers.h 文件里


# auto/have 作用：添加到./objs/ngx_auto_headers.h 文件里
if [ $NGX_DEBUG = YES ]; then											# --with-debug 选项开启 NGX_DEBUG
    have=NGX_DEBUG . auto/have											# 将have=NGX_DEBUG 添加到./objs/ngx_auto_headers.h 文件里
fi


if test -z "$NGX_PLATFORM"; then										# --crossbuild 参数没指定进入
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`									# 操作系统         e.g."Linux"
    NGX_RELEASE=`uname -r 2>/dev/null`									# 内核版本         e.g."3.10.0-957.21.3.el7.x86_64"
    NGX_MACHINE=`uname -m 2>/dev/null`									# 架构           e.g."x86_64"

    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";				# 平台，三个参数

    case "$NGX_SYSTEM" in
        MINGW32_* | MINGW64_* | MSYS_*)
            NGX_PLATFORM=win32											# 如果是32位系统
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

. auto/cc/conf

if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi

. auto/os/conf

if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

. auto/threads
. auto/modules
. auto/lib/conf

case ".$NGX_PREFIX" in
    .)
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac

if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define

. auto/make
. auto/lib/make
. auto/install

# STUB
. auto/stubs

have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi

. auto/summary
